from tqdm import tqdm
from time import sleep
import config

from chain_utils import Requester, send_ether, check_balance


def test_modify_validator(validator_to_modify, validator_rpc_addresses, add=False):
    node_rpc_address = validator_rpc_addresses[0]
    rnode = Requester(node_rpc_address)
    print("Checking validator addresses for JSON-RPC node")
    resp = rnode.send_request("ibft_getValidatorsByBlockNumber", ["latest"])
    print("Validators on network:")
    for r_ in resp["result"]:
        print(r_)
    print("")
    print(
        "Total validators before %s is %d"
        % (("adding" if add else "removing"), len(resp["result"]))
    )

    # Propose addition/removal of validator
    if add:
        print("Proposing adding %s as validator" % validator_to_modify)
    else:
        print("Proposing removing %s as validator" % validator_to_modify)

    for validator_rpc_address in validator_rpc_addresses:
        print("Sending vote from %s" % validator_rpc_address)
        r = Requester(validator_rpc_address)
        resp = r.send_request("ibft_proposeValidatorVote", [validator_to_modify, add])

    print("Sleeping for 12 seconds to finalize")
    for _ in tqdm(range(12)):
        sleep(1)

    resp = rnode.send_request("ibft_getValidatorsByBlockNumber", ["latest"])
    print("Validators on network:")
    for r_ in resp["result"]:
        print(r_)
    print("")
    print(
        "Total validators after %s is %d"
        % (("adding" if add else "removing"), len(resp["result"]))
    )
    # resp = r.send_request("eth_blockNumber", [])
    # print("Block number is %s" % (resp["result"]))


def tsleep(finalize_delay_sec):
    print("Sleeping %d seconds to finalize" % finalize_delay_sec)
    for _ in tqdm(range(finalize_delay_sec)):
        sleep(1)


def test_send_ether(sender, recipient_addr, value_eth):
    print("Checking balances before transfer")
    check_balance(sender.address)
    check_balance(recipient_addr)
    print("")

    gas = 30000
    gas_price_gwei = 1000
    # value_eth = 2.0

    print("Sending %.3f ETH" % value_eth)
    _ = send_ether(
        sender.address,
        recipient_addr,
        gas,
        gas_price_gwei,
        value_eth,
        sender.ethsigner_rpc_addr,
    )

    tsleep(config.finalize_delay_sec)
    r_ = Requester(sender.node_rpc_addr)
    _ = r_.send_request("eth_getBalance", [sender.address, "latest"])
    check_balance(sender.address)
    check_balance(recipient_addr)


def main():

    # Get validator node addresses generated by file
    with open("IBFT-Network/validator_node_addresses.txt", "r") as f:
        validators = [line.strip() for line in f]

    # Nodes preallocated with ETH from genesis config
    prealloc_nodes = [
        "fe3b557e8fb62b89f4916b721be55ceb828dbd73",
        "627306090abaB3A6e1400e9345bC60c78a8BEf57",
        "f17f52151EbEF6C7334FAD080c5704D77216b732",
    ]

    print("-" * 80)
    print("Checking preallocated balances")
    for node_to_query in prealloc_nodes:
        check_balance(node_to_query)
    print("")
    print("-" * 80)

    print("Checking validator balances")
    for validator in validators:
        check_balance(validator)
    print("")
    print("-" * 80)

    # Get configs for regular nodes 1 and 2
    from node_config import node1, node2, mm_addr

    # Send some ETH to MetaMask account for testing, modify MetaMask address as required
    print("Sending 20 ETH to MetaMask")
    kwargs = {
        "sender": node2,
        "recipient_addr": mm_addr,
        "value_eth": 20,
    }

    print(
        "Testing sending %.1d ETH from %s to %s"
        % (kwargs["value_eth"], kwargs["sender"].address, kwargs["recipient_addr"])
    )
    test_send_ether(**kwargs)
    print("")
    print("-" * 80)

    kwargs = {
        "sender": node2,
        "recipient_addr": node1.address,
        "value_eth": 20.0,
    }

    print(
        "Testing sending %.1d ETH from %s to %s"
        % (kwargs["value_eth"], kwargs["sender"].address, kwargs["recipient_addr"])
    )
    test_send_ether(**kwargs)
    print("-" * 80)

    kwargs = {
        "sender": node1,
        "recipient_addr": node2.address,
        "value_eth": 10.0,
    }
    print(
        "Testing sending %.1d ETH from %s to %s"
        % (kwargs["value_eth"], kwargs["sender"].address, kwargs["recipient_addr"])
    )
    test_send_ether(**kwargs)
    print("-" * 80)

    # check_balance(kwargs["sender"].address)
    # check_balance(kwargs["recipient_addr"])

    # print("Not modifying validators")
    validator_rpc_addresses = config.validator_rpc_addresses

    test_modify_validator(node1.address, validator_rpc_addresses, add=True)
    print("-" * 80)
    test_modify_validator(node1.address, validator_rpc_addresses, add=False)
    print("-" * 80)


if __name__ == "__main__":
    main()
